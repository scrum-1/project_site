<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="leo.20151212173315.1"><vh>@settings</vh>
<v t="leo.20151212173315.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="leo.20151212173315.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="amd.20160106095324.1" a="E"><vh>@path ./../</vh>
<v t="leo.20151213173811.1" a="E"><vh>假如要送到 gh-pages 分支, 使用下列按鈕</vh>
<v t="leo.20151212173658.1"><vh>@button gh-pages pelican</vh></v>
</v>
<v t="leo.20151213173830.1" a="E"><vh>假如要在近端檢視, 使用下列按鈕</vh>
<v t="leo.20151213085727.1"><vh>@button local pelican</vh></v>
</v>
<v t="amd.20160117010542.1"><vh>@button git rm -rf blog</vh></v>
<v t="amd.20151215180106.1" a="E"><vh>設定與開發</vh>
<v t="amd.20151216151325.1"><vh>@edit index.html</vh></v>
<v t="amd.20151216152209.1"><vh>@edit README.md</vh></v>
<v t="leo.20151213230723.1" a="E"><vh>Pelican 設定</vh>
<v t="leo.20151213230957.1"><vh>文章 Date 設定</vh></v>
<v t="leo.20151213230729.1"><vh>使用 summary plugin</vh></v>
</v>
<v t="amd.20151215170117.1"><vh>以下 pelicanconf.py 為近端與遠端的共同設定</vh></v>
<v t="leo.20151212173725.1"><vh>@edit pelicanconf.py</vh></v>
<v t="amd.20151215170142.1"><vh>以下 publishconf.py 為遠端所使用的設定</vh></v>
<v t="leo.20151212173803.1"><vh>@edit publishconf.py</vh></v>
<v t="amd.20151215170221.1"><vh>以下 local_publishconf.py 為近端所使用的設定</vh></v>
<v t="leo.20151213085752.1"><vh>@edit local_publishconf.py</vh></v>
<v t="amd.20151215121740.1" a="E"><vh>@path theme</vh>
<v t="amd.20151215121758.1" a="E"><vh>@path pelican-bootstrap3</vh>
<v t="amd.20151215121816.1" a="E"><vh>@path templates</vh>
<v t="amd.20151215121827.1"><vh>@edit base.html</vh></v>
<v t="amd.20151215121849.1"><vh>@edit search.html</vh></v>
<v t="amd.20151215152634.1"><vh>@edit tags.html</vh></v>
</v>
<v t="amd.20151216181314.1"><vh>@path static</vh>
<v t="amd.20151216181314.2" a="E"><vh>@path css</vh>
<v t="amd.20151216181314.3" a="E"><vh>@path pygments</vh>
<v t="amd.20151216181314.4"><vh>@edit fruity.css</vh></v>
</v>
</v>
</v>
</v>
<v t="amd.20151215154950.1" a="E"><vh>@path pelican-bootstrap3_local</vh>
<v t="amd.20151215154950.2" a="E"><vh>@path templates</vh>
<v t="amd.20151215154950.3"><vh>@edit base.html</vh></v>
<v t="amd.20151215154950.4"><vh>@edit search.html</vh></v>
<v t="amd.20151215162536.1" a="E"><vh>@path includes</vh>
<v t="amd.20151215162510.1"><vh>@edit sidebar.html</vh></v>
<v t="yen.20170114233207.1"><vh>@edit liquid_tags_nb_header.html</vh></v>
</v>
<v t="amd.20151215154950.5"><vh>@edit tags.html</vh></v>
</v>
<v t="amd.20151216173334.1" a="E"><vh>@path static</vh>
<v t="amd.20151216173344.1" a="E"><vh>@path css</vh>
<v t="amd.20151216173352.1" a="E"><vh>@path pygments</vh>
<v t="amd.20151216173409.1"><vh>@edit fruity.css</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="amd.20151215170326.1"><vh>以下在修改或查驗 plugin 目錄下的檔案</vh></v>
<v t="amd.20151215154225.1" a="E"><vh>@path plugin</vh>
<v t="amd.20151215154238.1" a="E"><vh>@path tipue_search</vh>
<v t="amd.20151215154248.1"><vh>@edit tipue_search.py</vh></v>
</v>
</v>
</v>
<v t="amd.20160301205134.1"><vh>Flask 專案</vh>
<v t="amd.20160301205148.1"><vh>@edit setup.py</vh></v>
<v t="amd.20160301205822.1"><vh>@edit config.py</vh></v>
<v t="amd.20160301205303.1"><vh>@edit wsgi.py</vh></v>
<v t="amd.20160301205326.1" a="E"><vh>@clean myflaskapp.py</vh>
<v t="amd.20160301205326.2"><vh>send_static</vh></v>
<v t="amd.20160301205326.3"><vh>index</vh></v>
<v t="amd.20160301205326.4"><vh>user</vh></v>
<v t="amd.20160301205326.5"><vh>req1</vh></v>
<v t="amd.20160301205326.6"><vh>red</vh></v>
<v t="amd.20160301205326.7"><vh>guessform</vh></v>
<v t="amd.20160301205326.8"><vh>docheck</vh></v>
<v t="amd.20160301205326.9"><vh>addgithubform</vh></v>
<v t="amd.20160301205326.10"><vh>addgithub</vh></v>
<v t="amd.20160301205326.11"><vh>autho_index</vh></v>
<v t="amd.20160301205326.12"><vh>autho_login</vh></v>
<v t="amd.20160301205326.17"><vh>cadpaform</vh></v>
<v t="amd.20160301205326.18"><vh>cadpaadd</vh></v>
</v>
<v t="amd.20160301205410.1" a="E"><vh>@path templates</vh>
<v t="amd.20160301205410.2"><vh>@edit index.html</vh></v>
<v t="amd.20160301205410.3"><vh>@edit user.html</vh></v>
<v t="amd.20160301205410.4"><vh>@edit guessform.html</vh></v>
<v t="amd.20160301205410.5"><vh>@edit docheck.html</vh></v>
<v t="amd.20160301205410.6"><vh>@edit toobig.html</vh></v>
<v t="amd.20160301205410.7"><vh>@edit toosmall.html</vh></v>
<v t="amd.20160301205410.8"><vh>@edit autho_base.html</vh></v>
<v t="amd.20160301205410.9"><vh>@edit autho_index.html</vh></v>
<v t="amd.20160301205410.10"><vh>@edit autho_login.html</vh></v>
<v t="amd.20160301205410.11"><vh>@edit addgithubform.html</vh></v>
<v t="amd.20160301205410.15"><vh>@edit cadpaform.html</vh></v>
<v t="amd.20160301205410.19"><vh>@edit cadpaerror.html</vh></v>
</v>
</v>
<v t="amd.20160301010714.1"><vh>組員名單</vh></v>
<v t="amd.20160301223228.1"><vh>程式測試</vh></v>
<v t="amd.20160301011834.1" a="E"><vh>參考資料</vh>
<v t="amd.20160302110137.1"><vh>機械設計專案參考</vh></v>
<v t="amd.20160303145322.1"><vh>Node.js</vh></v>
<v t="amd.20160303153826.1"><vh>jupyter</vh></v>
<v t="amd.20160303163519.1"><vh>Windows</vh></v>
</v>
<v t="amd.20160309123311.1" a="E"><vh>處理錯誤</vh>
<v t="amd.20160309123318.1" a="E"><vh>@path content</vh>
<v t="amd.20160309123402.1"><vh>@@edit 40323130_20160301.md</vh></v>
<v t="amd.20160309123451.1"><vh>@edit 40323143_20160309.md</vh></v>
</v>
</v>
</v>
<v t="amd.20151215170350.1"><vh>以下為 content 目錄中的 md 檔案</vh></v>
<v t="amd.20160106093610.1"><vh>協同網誌編寫規範</vh></v>
<v t="amd.20160301001423.1"><vh>專題類別與標籤規劃</vh></v>
<v t="amd.20160309073114.1"><vh>有關 pelican 與 WP 同步內容</vh>
<v t="amd.20160309073149.1"><vh>@button new to wp</vh></v>
<v t="amd.20160309073204.1"><vh>@button edit to wp</vh></v>
<v t="amd.20160309073217.1" a="E"><vh>@button get from wp</vh>
<v t="amd.20160309073217.2"><vh>程式設計考量</vh></v>
</v>
<v t="amd.20160309103606.1" a="E"><vh>動靜整合條件</vh>
<v t="amd.20160309103957.1"><vh>程式碼 hightligh</vh></v>
<v t="amd.20160309103936.1"><vh>摘要與內文區隔</vh></v>
<v t="amd.20160309104219.1"><vh>文章類別與 tags</vh></v>
<v t="amd.20160309104821.1"><vh>為了整合而做的輸入原則</vh></v>
<v t="amd.20160309105129.1"><vh>可行的整合方法</vh></v>
<v t="amd.20160309141114.1"><vh>Leo Editor 程式開發</vh></v>
</v>
<v t="amd.20160309073903.1" a="E"><vh>測試用的 Wordpress</vh>
<v t="amd.20160309073903.2" a="E"><vh>@url 連結網誌</vh>
<v t="amd.20160309073903.3"><vh>如何使用 @url 節點</vh></v>
</v>
</v>
</v>
<v t="amd.20160317165434.1"><vh>有關 Flask 程式</vh></v>
<v t="amd.20160317164722.1"><vh>有關 Firepick 專案</vh></v>
<v t="amd.20160321213855.1"><vh>有關網際繪圖</vh>
<v t="amd.20160321214152.1"><vh>正齒輪</vh></v>
<v t="amd.20160321214628.1"><vh>模型製作</vh></v>
</v>
<v t="amd.20151216001126.1"><vh>md 檔案範例</vh></v>
<v t="amd.20151215170031.1" a="E"><vh>@path ./../content</vh>
<v t="amd.20160106093454.1" a="E"><vh>yen 所寫的網誌文章</vh>
<v t="amd.20160213095053.1" a="E"><vh>201603</vh>
<v t="amd.20160224170554.1"><vh>@edit yen_20160301.md</vh></v>
<v t="amd.20160301114516.1"><vh>@edit yen_20160301-1.md</vh></v>
<v t="leo.20160301161358.1"><vh>@edit yen_20160301-2.md</vh></v>
<v t="amd.20160302114829.1"><vh>@edit yen_20160302.md</vh></v>
<v t="amd.20160308202738.1"><vh>@edit yen_20160308.md</vh></v>
<v t="amd.20160309082155.1"><vh>@edit yen_20160309.md</vh></v>
<v t="amd.20160309132000.1"><vh>@edit yen_20160309-1.md</vh></v>
<v t="amd.20160309194649.1"><vh>@edit yen_20160309-2.md</vh></v>
<v t="amd.20160310181325.1"><vh>@edit yen_20160310.md</vh></v>
<v t="amd.20160311215621.1"><vh>@edit yen_20160311.md</vh></v>
<v t="amd.20160312115755.1"><vh>@edit yen_20160312.md</vh></v>
<v t="amd.20160313174506.1"><vh>@edit yen_20160313.md</vh></v>
<v t="amd.20160316214216.1"><vh>@edit yen_20160315.md</vh></v>
<v t="amd.20160322222650.1"><vh>@edit yen_20160322.md</vh></v>
<v t="amd.20160322234659.1"><vh>@edit yen_20160322-1.md</vh></v>
<v t="amd.20160324224258.1"><vh>@edit yen_20160324.md</vh></v>
<v t="amd.20160326184051.1"><vh>@@edit yen_20160326-1.md</vh></v>
<v t="amd.20160327224113.1"><vh>@@edit yen_20160327.md</vh></v>
<v t="amd.20160327224200.1"><vh>@@edit yen_20160327-1.md</vh></v>
</v>
<v t="amd.20160727114410.1"><vh>2016_before_09</vh>
<v t="amd.20160401184837.1"><vh>@edit yen_20160401.md</vh></v>
<v t="amd.20160521230100.1"><vh>@edit yen_20160521.md</vh></v>
<v t="amd.20160405235750.1"><vh>@edit yen_20160405.md</vh></v>
<v t="amd.20160408221721.1"><vh>@edit yen_20160408.md</vh></v>
<v t="amd.20160727114506.1"><vh>201607</vh>
<v t="amd.20160708145548.1"><vh>@@edit yen_20160708.md</vh></v>
<v t="amd.20160727111427.1"><vh>@edit yen_20160727.md</vh></v>
<v t="amd.20160727120222.1"><vh>@edit yen_20160728.md</vh></v>
</v>
<v t="leo.20160902104008.1" a="E"><vh>201609</vh>
<v t="leo.20160902104020.1"><vh>@edit yen_20160902.md</vh></v>
</v>
</v>
<v t="yen.20161010133345.1" a="E"><vh>201610</vh>
<v t="yen.20161010133351.1"><vh>@edit yen_20161010.md</vh></v>
<v t="yen.20161013111738.1"><vh>@edit yen_20161013.md</vh></v>
<v t="yen.20161016090502.1"><vh>@edit yen_20161016.md</vh></v>
<v t="yen.20161022170058.1"><vh>@edit yen_20161022.md</vh></v>
<v t="yen.20161025164940.1"><vh>@edit yen_20161025.md</vh></v>
<v t="yen.20161027071200.1"><vh>@edit yen_20161027.md</vh></v>
<v t="yen.20161101222256.1"><vh>@edit yen_20161101.md</vh></v>
<v t="yen.20161106203658.1"><vh>@edit yen_20161106.md</vh></v>
<v t="yen.20161107103321.1"><vh>@edit yen_20161107.md</vh></v>
<v t="yen.20161112094709.1"><vh>@edit yen_20161112.md</vh></v>
<v t="ibm.20161114130952.1"><vh>@edit yen_20161114.md</vh></v>
<v t="yen.20161206165637.1"><vh>@edit yen_20161206.md</vh></v>
<v t="yen.20161207105714.1"><vh>@edit yen_20161207.md</vh></v>
<v t="yen.20161208222809.1"><vh>@edit yen_20161208.md</vh></v>
<v t="yen.20161215110203.1"><vh>@edit yen_20161215.md</vh></v>
<v t="yen.20161217063133.1"><vh>@edit yen_20161217.md</vh></v>
<v t="yen.20161228103910.1"><vh>@edit yen_20161228.md</vh></v>
<v t="yen.20170107071836.1"><vh>@edit yen_20170107.md</vh></v>
</v>
</v>
</v>
<v t="amd.20160106094754.1"><vh>@path ./../content/pages</vh>
<v t="amd.20160106094829.1" a="E"><vh>yen 所寫的 pages 文章</vh>
<v t="amd.20160106094844.1"><vh>@edit yen_pages_1.md</vh></v>
</v>
</v>
<v t="yen.20161207105111.1"><vh>@button https server</vh></v>
<v t="yen.20161207105124.1"><vh>@button ipv6 https server</vh></v>
<v t="yen.20170215004706.1"><vh>20170215 改版</vh></v>
</vnodes>
<tnodes>
<t tx="amd.20151215121740.1"></t>
<t tx="amd.20151215121758.1"></t>
<t tx="amd.20151215121816.1"></t>
<t tx="amd.20151215154225.1"></t>
<t tx="amd.20151215154238.1"></t>
<t tx="amd.20151215154950.1"></t>
<t tx="amd.20151215154950.2"></t>
<t tx="amd.20151215162536.1"></t>
<t tx="amd.20151215170031.1"></t>
<t tx="amd.20151215170117.1"></t>
<t tx="amd.20151215170142.1"></t>
<t tx="amd.20151215170221.1"></t>
<t tx="amd.20151215170326.1"></t>
<t tx="amd.20151215170350.1"></t>
<t tx="amd.20151215180106.1"></t>
<t tx="amd.20151216001126.1">@language md
Title: 文章標題 (請注意各文章的標題不可相同, 比較保險的作法是冠上四個學號尾碼)
Category: 類別
Tags: 標籤
Author: yen

這裡放入文章摘要

&lt;!-- PELICAN_END_SUMMARY --&gt;

這裡為文章主要內容

程式碼

&lt;pre class="brush: python;"&gt;
print("hello")
&lt;/pre&gt;</t>
<t tx="amd.20151216173334.1"></t>
<t tx="amd.20151216173344.1"></t>
<t tx="amd.20151216173352.1"></t>
<t tx="amd.20151216181314.1"></t>
<t tx="amd.20151216181314.2"></t>
<t tx="amd.20151216181314.3"></t>
<t tx="amd.20160106093454.1"></t>
<t tx="amd.20160106093610.1">協同成員的 .leo 檔案

    每一位協同者, 各自可以在 users 目錄下擁有一個 .leo 檔案, 用來維護各自位於 content 目錄下的 .md 檔案,
    
    例如: 
    
    user yen 的 .leo 檔案位於 users/yen.leo
    
    user 40323123 的 .leo 檔案位於 users/40323123.leo

協同成員的 .md 檔案命名

    由於各成員所編寫的 .md 檔案都位於 content 目錄下, 因此必須在各負責的 .md 檔案名稱冠上用戶名稱,
    
    例如: 
    
    由 yen 負責編寫的 .md 檔案, 特別命名為 yen_20160301.md, 若一天有兩篇以上文章, 則取 yen_20160301-1.md
    
    由 40323123 負責編寫的 .md 檔案, 特別命名為 40323123_20160301.md, 若一天有兩篇以上文章, 則取 40323123_20160301-1.md
    
    當使用者要利用 pelican 在近端轉換網誌時, 必須使用 local-pelican 按鈕, 若要送到 github pages 網站, 則必須透過 gh-pages-pelican 按鈕轉檔.

pages 文章

    寫在 content/pages 目錄中的 .md 檔案, 將會被轉為網誌 pages 內容

</t>
<t tx="amd.20160106094754.1"></t>
<t tx="amd.20160106094829.1"></t>
<t tx="amd.20160106095324.1"></t>
<t tx="amd.20160117010542.1">@language python
import os
os.system("git rm -rf blog")
g.es("git rm -rf blog 執行完畢")</t>
<t tx="amd.20160213095053.1"></t>
<t tx="amd.20160301001423.1">類別:

2016g1

2016g2

2016g3

Tutorial

MISC</t>
<t tx="amd.20160301010714.1">40323123 (smpss91341) 林祐生
40323130 康民宗
40323131 張元旭
40323143 陳靖廷

40323205 陳子潔
40323206 (michell1995huang) 黃婉菁
40323218 李冠興
40323231 張立昇

40323230 張元
40323203 施郁琪
40323214 吳信褘
40323250 詹偉志</t>
<t tx="amd.20160301011834.1">http://www.arc.id.au/CangoAnimationManual.html

https://github.com/google/oauth2client

http://www.jianshu.com/p/f5fcc0931813

https://developers.google.com/gmail/api/quickstart/python</t>
<t tx="amd.20160301205134.1"></t>
<t tx="amd.20160301205326.1">@language python
# coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random
import github3
# for authomatic
from authomatic.adapters import WerkzeugAdapter
from authomatic import Authomatic
# from config.py 導入 CONFIG
from config import CONFIG

app = Flask(__name__)

# Instantiate Authomatic.
authomatic = Authomatic(CONFIG, 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T', report_errors=False)

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'

@others

if __name__ == "__main__":
    app.run()

</t>
<t tx="amd.20160301205326.10">@app.route('/addgithub')
def addgithub():
    #################################
    filepath = "/home/amd/Desktop/data.txt"
    with open(filepath, "r") as f:
        datalist = f.read().splitlines()
    #data.txt 格式
    #url,https://github.com/username/repo.git
    #repo,repo
    #username,username
    #password,password
    url = datalist[0].split(",")[1]
    repository = datalist[1].split(",")[1]
    username = datalist[2].split(",")[1]
    password = datalist[3].split(",")[1]
    #################################
    # 登入系統
    g = github3.login(username, password)
    # user = g.me()
    # 以下修改 profile
    '''
    new_name = '2016測試用帳號'
    blog = 'http://測試用.帳號/'
    company = '測試用公司'
    bio = "測試用 bio"
    if g.update_me(new_name, blog, company, bio=bio):
    print('Profile 已經更新.')
    '''
    # 以下則新增協同者
    g.repository(username, repository).add_collaborator("coursemdetw")

    return "done"</t>
<t tx="amd.20160301205326.11">@app.route('/autho_index')
def autho_index():
    
    return render_template('autho_index.html')</t>
<t tx="amd.20160301205326.12">@app.route('/autho_login/&lt;provider_name&gt;/', methods=['GET', 'POST'])
def autho_login(provider_name):
    
    # We need response object for the WerkzeugAdapter.
    response = make_response()
    
    # Log the user in, pass it the adapter and the provider name.
    result = authomatic.login(WerkzeugAdapter(request, response), provider_name)
    
    # If there is no LoginResult object, the login procedure is still pending.
    if result:
        if result.user:
            # We need to update the user to get more info.
            result.user.update()
        
        # The rest happens inside the template.
        return render_template('autho_login.html', result=result)
    
    # Don't forget to return the response.
    return response</t>
<t tx="amd.20160301205326.17">@app.route('/cadpaform')
def cadpaform():
    # https://github.com/username/repository_title 協同者新增表單
    return render_template("cadpaform.html")</t>
<t tx="amd.20160301205326.18">@app.route('/cadpaadd', methods=['POST'])
def cadpaadd():
    #################################
    filepath = "/home/amd/Desktop/data.txt"
    with open(filepath, "r") as f:
        datalist = f.read().splitlines()
    #data.txt 格式
    #url,https://github.com/username/repo.git
    #repo,repo
    #username,username
    #password,password
    url = datalist[0].split(",")[1]
    repository = datalist[1].split(",")[1]
    username = datalist[2].split(",")[1]
    password = datalist[3].split(",")[1]
    #################################
    account = request.form["account"]
    # 登入系統
    g = github3.login(username, password)
    # 以下則新增協同者
    #g.repository(倉儲帳號, 倉儲名稱).add_collaborator(協同者 github 帳號)
    # 若新增 collaborator 成功傳回 True 否則傳回 False
    if g.repository(username, repository).add_collaborator(account):
        # 共同使用 cpaadd.html
        return render_template("cpaadd.html", account=account, repository=repository, url=url)
    else:
        return render_template("cadpaerror.html")</t>
<t tx="amd.20160301205326.2"># setup static directory
# 由於 gh-pages 對應的靜態文件位於 blog 目錄下, 因此將原先的 static 改為 blog
@app.route('/blog/&lt;path:path&gt;')
def send_static(path):
    return send_from_directory('blog', path)</t>
<t tx="amd.20160301205326.3">@app.route("/")
def index():
    #這是猜數字遊戲的起始表單, 主要在產生答案, 並且將 count 歸零
    # 將標準答案存入 answer session 對應區
    theanswer = random.randint(1, 100)
    thecount = 0
    # 將答案與計算次數變數存進 session 對應變數
    session['answer'] = theanswer
    session['count'] = thecount

    return render_template("index.html", answer=theanswer, count=thecount)


</t>
<t tx="amd.20160301205326.4">@app.route('/user/&lt;name&gt;')
# 為了避免 syntaxhighlighter 自動加上 &lt;/name&gt;, 在這裡先行用註解補上, 之後再找解決方案
def user(name):
    return render_template("user.html", name=name)</t>
<t tx="amd.20160301205326.5">@app.route('/req1')
def req1():
    user_agent = request.headers.get('User-Agent')
    return '&lt;p&gt;Your browser is %s&lt;/p&gt;' % user_agent</t>
<t tx="amd.20160301205326.6">@app.route('/red')
def red():
    # 重新導向 google
    return redirect("http://www.google.com")</t>
<t tx="amd.20160301205326.7">@app.route('/guessform')
def guessform():
    session["count"] += 1
    guess = session.get("guess")
    theanswer = session.get("answer")
    count = session.get("count")
    return render_template("guessform.html", guess=guess, answer=theanswer, count=count)</t>
<t tx="amd.20160301205326.8">@app.route('/docheck', methods=['POST'])
def docheck():
    # session[] 存資料
    # session.get() 取 session 資料
    # 利用 request.form[] 取得表單欄位資料, 然後送到 template
    guess = request.form["guess"]
    session["guess"] = guess
    # 假如使用者直接執行 doCheck, 則設法轉回根方法
    if guess is None:
        redirect("/")
    # 從 session 取出 answer 對應資料, 且處理直接執行 docheck 時無法取 session 值情況
    try:
        theanswer = int(session.get('answer'))
    except:
        redirect("/")
    # 經由表單所取得的 guess 資料型別為 string
    try:
        theguess = int(guess)
    except:
        return redirect("/guessform")
    # 每執行 doCheck 一次,次數增量一次
    session["count"] += 1
    count = session.get("count")
    # 答案與所猜數字進行比對
    if theanswer &lt; theguess:
        return render_template("toobig.html", guess=guess, answer=theanswer, count=count)
    elif theanswer &gt; theguess:
        return render_template("toosmall.html", guess=guess, answer=theanswer, count=count)
    else:
        # 已經猜對, 從 session 取出累計猜測次數
        thecount = session.get('count')
        return "猜了 "+str(thecount)+" 次, 終於猜對了, 正確答案為 "+str(theanswer)+": &lt;a href='/'&gt;再猜&lt;/a&gt;"
    return render_template("docheck.html", guess=guess)
 </t>
<t tx="amd.20160301205326.9">@app.route('/addgithubform')
def addgithubform():
    return render_template("addfithubform.html")</t>
<t tx="amd.20160301205410.1"></t>
<t tx="amd.20160301223228.1">filepath = "/home/amd/Desktop/data.txt"
with open(filepath, "r") as f:
    datalist = f.read().splitlines()

g.es(datalist)

#第1行為 repository 的 url
#第2行為 repository name
#第3行為 username
#第四行為 password
url = datalist[0].split(",")[1]
repository = datalist[1].split(",")[1]
username = datalist[2].split(",")[1]
password = datalist[3].split(",")[1]
g.es(url)
g.es(repository)
g.es(username)
g.es(password)</t>
<t tx="amd.20160302110137.1">搜尋機械設計專案的目的在進行分類:

機構 - 省力, 增加功能, 增加效能

能源 - 省能源, 製能, 整合運用

機電控制 - 提高效能

方法:

系統模擬

數值分析

自動控制

工程資料管理 - PDM, PLM

http://www.mtu.edu/mechanical/undergraduate/senior-design/spring-2015/

客車或貨車尾門的設計

    設計目的: 增加額外容量功能或休憩功能
    
綠色能源系統

    設計目的: 家用風力發電, 運動器材發電, 太陽能發電與電力控管系統
    
https://capstone.me.ucsb.edu/past-projects

https://www.youtube.com/results?search_query=mechanical+design+project

http://poisson.me.dal.ca/~DP_MECH/past_projects.html

http://poisson.me.dal.ca/~DP_MECH/

https://www.me.washington.edu/students/ug/capstone.html

https://projectselect.mecheng.adelaide.edu.au/

https://engineering.temple.edu/departments-programs/senior-design-projects?filter=department/3</t>
<t tx="amd.20160303145322.1">在 Ubuntu 14.04 安裝

安裝 node.js

    sudo apt-get update
    
    sudo apt-get install nodejs
    
    sudo apt-get install npm
    
安裝 ungit

    sudo ln -s /usr/bin/nodejs /usr/bin/node

    sudo npm install -g ungit</t>
<t tx="amd.20160303153826.1">在 Ubuntu 14.04 安裝 jupyter

先安裝開發系統:

sudo apt-get install build-essential python3-dev

sudo pip3 install jupyter

更新 jupyter:

    sudo pip3 install -U jupyter</t>
<t tx="amd.20160303163519.1">Windows 工具網站:

http://www.toolwiz.com/downloads/

http://www.techbang.com/posts/19270-infinite-regeneration-windows-81-boot-restore-cheat-secretly-reported-74-special-feature

http://blog.ilc.edu.tw/blog/blog/25793/post/73149/507902

http://dyna.boe.ttct.edu.tw/data/user/506b8811c8839/files/201405071750211.pdf

Browser in the box:

http://download.sirrix.com/content/pages/bbdl-en.htm (linux and Windows)</t>
<t tx="amd.20160309073114.1"></t>
<t tx="amd.20160309073149.1">@language python
#coding: utf-8
import xmlrpc.client
import datetime
import os

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的 body pan 內容, 第1行為 @language python
    # 用跳行符號分割
    data_list = data.split("\n")
    #第2行為 title
    title= data_list[1]
    #第3行為 category
    category = data_list[2]
    #第4行為 tags
    tags = data_list[3]
    # 有多項資料的 content 型別為數列
    # 再將第7行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[6:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Wordpress 的 &lt;!-more-&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    content = content.replace('~~~python', '[code lang="python"]')
    content = content.replace('~~~', '[/code]')
    return title, category, tags, content
    
os.environ['TZ'] = 'Asia/Taipei'

#################################
filepath = "/home/amd/Desktop/account_password.txt"
wordpress = "the.wordpress.site.url"
fo = open(filepath, "r+")
data = []
for line in fo.readlines():
    data.append(line)
fo.close()

# 從網誌節點的 parent().h 取得 wp_url
# 從網誌節點的 parent().b 取得帳號與密碼對應的文字檔案路徑
wp_url = "https://"+wordpress+"/xmlrpc.php"
wp_username = data[0]
wp_password = data[1]
#################################
wp_blogid = "0"
 
status_draft = 0
status_published = 1
 
server = xmlrpc.client.ServerProxy(wp_url)

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 指定時間出版
'''
date_created = xmlrpc.client.DateTime(datetime.datetime.strptime("2013-01-01 00:00",
"%Y-%m-%d %H:%M"))
'''
# 以現在時間出版, 考慮與 Server 時間差八個小時 (480 分鐘), 因此要在 8 個小時前發表
date_created = xmlrpc.client.DateTime(datetime.datetime.strptime((datetime.datetime.now()- \
datetime.timedelta(minutes=480)).strftime('%Y-%m-%d %H:%M'),"%Y-%m-%d %H:%M"))
categories = [category_str.split(":")[1]]
# 請注意, 因為 tags 用逗點隔開, 因此必須透過 split() 再分開成為 list 資料
# 先用 : 斷開標投頭的 Tags:, 然後再透過逗點隔開, 將標註轉為數列資料
tags = tags_str.split(":")[1].split(",")
data = {'title': title, 'description': content, 'dateCreated': date_created, 'categories': categories, 'mt_keywords': tags}
 
post_id = server.metaWeblog.newPost(wp_blogid, wp_username, wp_password, data, status_published)
# 利用最後的 child 節點來儲存 post_id
to_save_post_id = p.insertAsLastChild()   
# 改為內文為空的節點, id 直接標在 head 標題 
to_save_post_id.b = ""
to_save_post_id.h = post_id
# 因為新增節點, commander 必須 redraw
c.redraw() 

g.es("post_id 為", post_id)
g.es("已經送出資料!")

'''
其他 metaWeblog 的用法:
metaWeblog.newPost (blogid, username, password, struct, publish) returns string(postid)
metaWeblog.editPost (postid, username, password, struct, publish) returns true
metaWeblog.getPost (postid, username, password) returns struct(blog content)
'''</t>
<t tx="amd.20160309073204.1">@language python
#coding: utf-8
import xmlrpc.client
import datetime
import os

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的 body pan 內容, 第1行為 @language python
    # 用跳行符號分割
    data_list = data.split("\n")
    #第2行為 title
    title= data_list[1]
    #第3行為 category
    category = data_list[2]
    #第4行為 tags
    tags = data_list[3]
    # 有多項資料的 content 型別為數列
    # 再將第7行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[6:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Wordpress 的 &lt;!-more-&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    content = content.replace('~~~python', '[code lang="python"]')
    content = content.replace('~~~', '[/code]')
    return title, category, tags, content
    
os.environ['TZ'] = 'Asia/Taipei'
 
#################################
filepath = "/home/amd/Desktop/account_password.txt"
wordpress = "the.wordpress.site.url"
fo = open(filepath, "r+")
data = []
for line in fo.readlines():
    data.append(line)
fo.close()

wp_url = "https://"+wordpress+"/xmlrpc.php"
wp_username = data[0]
wp_password = data[1]
#################################
wp_blogid = "0"
 
status_draft = 0
status_published = 1
 
server = xmlrpc.client.ServerProxy(wp_url)

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 指定時間出版
'''
date_created = xmlrpc.client.DateTime(datetime.datetime.strptime("2013-01-01 00:00",
"%Y-%m-%d %H:%M"))
'''
# 以現在時間出版, 考慮與 Server 時間差八個小時 (480 分鐘), 因此要在 8 個小時前發表
date_created = xmlrpc.client.DateTime(datetime.datetime.strptime((datetime.datetime.now()- \
datetime.timedelta(minutes=480)).strftime('%Y-%m-%d %H:%M'),"%Y-%m-%d %H:%M"))
categories = [category_str.split(":")[1]]
# 請注意, 因為 tags 用逗點隔開, 因此必須透過 split() 再分開成為 list 資料
tags = tags_str.split(":")[1].split(",")
data = {'title': title, 'description': content, 'dateCreated': date_created, 'categories': categories, 'mt_keywords': tags}

# 設法取得原 post 的 id
origin_post = p.getLastChild()
# 直接從標題取得 post 的 id 號碼
post_id = origin_post.h
status = server.metaWeblog.editPost(post_id, wp_username, wp_password, data, status_published)

if status:
    g.es("資料已經更新!")
else:
    g.es("有問題, 資料沒有更新!")
'''
其他 metaWeblog 的用法:
metaWeblog.newPost (blogid, username, password, struct, publish) returns string(postid)
metaWeblog.editPost (postid, username, password, struct, publish) returns true
metaWeblog.getPost (postid, username, password) returns struct(blog content)
'''</t>
<t tx="amd.20160309073217.1">@language python
#coding: utf-8
import xmlrpc.client
# 導入 html 模組, 使用 html.unescape 轉換 html 特殊符號
import html
 
#################################
filepath = "/home/amd/Desktop/account_password.txt"
wordpress = "the.wordpress.site.url"
fo = open(filepath, "r+")
data = []
for line in fo.readlines():
    data.append(line)
fo.close()

# 從網誌節點的 parent().h 取得 wp_url
# 從網誌節點的 parent().b 取得帳號與密碼對應的文字檔案路徑
wp_url = "https://"+wordpress+"/xmlrpc.php"
wp_username = data[0]
wp_password = data[1]
#################################

server = xmlrpc.client.ServerProxy(wp_url)

# 設法透過上述網誌網址, 帳號與密碼, 以及文章 id, 取回 categories, tags, 文章標題, 文章內容等資

# 從最後的 child 節點來取 post_id
origin_post = p.getLastChild()
post_id = origin_post.h
# 取回與 post_id 對應的網誌文章內容
blog_content = server.metaWeblog.getPost(post_id, wp_username, wp_password)
title = blog_content["title"]
# 這裡要利用 html.unescape 轉回特殊符號
description = html.unescape(blog_content["description"])
mt_text_more = html.unescape(blog_content["mt_text_more"])
if mt_text_more != "":
    post_content = description + "\n&lt;!--more--&gt;\n"+mt_text_more
else:
    post_content = description
# 所取回的 categories 為 list
categories = blog_content["categories"]
# 所取回的 tags 為以逗點隔開的字串
mt_keywords = blog_content["mt_keywords"]
# 取回文章作者
author = blog_content["wp_author_display_name"]
p.h = title
categories_str = ""
for category in categories:
    # 假如不是最後一個
    if category != categories[len(categories)-1]:
        categories_str += category + ", "
    else:
        # 這是最後一個
        categories_str += category
line1 = "@language md\n"
line2 = "Title: " +title + "\n"
line3 = "Category: " + categories_str + "\n"
line4 = "Tags: " + mt_keywords + "\n"
line5 = "Author: " + author + "\n@others\n"
post_content = post_content.replace('&lt;!--more--&gt;', '\n&lt;!-- PELICAN_END_SUMMARY --&gt;\n')
post_content = post_content.replace('[code lang="python"]', '~~~python')
post_content = post_content.replace('[/code]', '~~~')
p.b = line1 + line2 + line3 + line4 + line5 + post_content + "\n"
# 因為節點資料更新, commander 必須 redraw
c.redraw() 
g.es("資料已經取回")



</t>
<t tx="amd.20160309073217.2">俱備取回資料的權限

透過子節點的文章 id 與網誌網址, 以 xmlrpc 協定進行連線

取回 categories, tags, 文章標題與文章內容, 還有作者帳號

分別按照格式, 將取回的資料放入對應節點

</t>
<t tx="amd.20160309073903.1">wordpress-2014openshift.rhcloud.com
/home/amd/Desktop/demo-2015course.txt</t>
<t tx="amd.20160309073903.2">http://wordpress-2014openshift.rhcloud.com</t>
<t tx="amd.20160309073903.3">按著 Ctrl+Alt 再按滑鼠左鍵, 就可以連結到上述網址</t>
<t tx="amd.20160309103606.1">這裡希望先找出 Wordpress 與 Pelican 在文章資料提供上的差異進行比較, 然後再找出可行的整合方案</t>
<t tx="amd.20160309103936.1">Wordpress 使用:

    &lt;!--more--&gt;

Pelican 使用:

    &lt;!-- PELICAN_END_SUMMARY --&gt;</t>
<t tx="amd.20160309103957.1">程式碼 hightlight 方式差異:

在 Wordpress 中, 使用 code 的標註.

    [code lang="python"]
    def client_ip():
        try:
            return cherrypy.request.headers["X-Forwarded-For"]
        except:
            return cherrypy.request.headers["Remote-Addr"]
    [/code]

而 Pelican 目前則使用簡潔法.

    ~~~python
    print("hello")
    ~~~

因此理論上只要, 將

[code lang="python"] 與 ~~~python 對應

[/code] 與 ~~~&lt;br /&gt; 對應

應該就有機會整合兩端的原始文章內容格式.</t>
<t tx="amd.20160309104219.1">Wordpress 使用:

    Categories: Uncategorized
    Tags: OpenShift, Cherrypy
    
Pelican 使用:

    Title: yen - 2016 年專題啟動
    Category: Tutorial
    Tags: 教學導引, 網誌設定
    Author: yen

</t>
<t tx="amd.20160309104821.1">所有相關 anchor 連結, 不能再使用 Pelican Markdown 的 &lt;url&gt;, 而必須改為完整的 &lt;a href="url"&gt;url&lt;/a&gt; 格式編寫.

而 image 檔案的引用, 則一律採用 img tags

程式碼引用的前後標註, 則必須再看看是否能夠整合, 或者需要在整體內容推送前進行轉檔
</t>
<t tx="amd.20160309105129.1">每一篇文章的輸入, 必須先拆成:

標題:

類別:

Tags:

作者:

摘要:

內文:

然後在推送到 Pelican md 檔案與 Wordpress 的文章內容前, 再次確認兩端的格式與資料處理與傳送方法.
</t>
<t tx="amd.20160309123311.1"></t>
<t tx="amd.20160309123318.1"></t>
<t tx="amd.20160309123402.1"></t>
<t tx="amd.20160309141114.1">execute-script predefines:

c: The commander of the present outline.
g: The leo.core.leoGlobals module.
p: The presently selected position, c.p.</t>
<t tx="amd.20160317164722.1">http://delta.firepick.org/

https://www.youtube.com/watch?v=46pLeLBYVTs

https://www.youtube.com/watch?v=JIsRg-rxfuE

https://hackaday.io/project/963-firepick-delta-the-open-source-microfactory

http://diy3dprinting.blogspot.tw/2014/12/firepick-delta-open-source-diy-pick-and.html

http://static1.squarespace.com/static/53c16638e4b0fb85d41808ab/53c71867e4b04b94d4ca05a5/54efea8be4b06321d2fefc3a/1425009385880/?format=750w

http://3dprint.com/5445/firepick-delta-electronics/</t>
<t tx="amd.20160317165434.1">Peewee ORM

https://github.com/coleifer/peewee

Pygments

http://pygments.org/</t>
<t tx="amd.20160321213855.1">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
	&lt;head&gt;
		&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
		&lt;title&gt;Spur Gear creator&lt;/title&gt;
		&lt;script src="http://code.jquery.com/jquery-latest.min.js"&gt;&lt;/script&gt;
		&lt;script&gt;
			function getN() { 
				var N = Number( $("#N").val() );
				if( N&lt;3 ) {
					N = 3;
					setN( N );
				}
				return N;
			}			
			function setN( v ) { $("#N").val( v ); }			
			function getD() { return Number( $("#D").val() ); }			
			function setD( v ) { $("#D").val( v ); }			
			function getP() { return Number( $("#P").val() ); }			
			function setP( v ) { $("#P").val( v ); }			
			function getscale() { return Number( $("#scale").val() ); }			
			function setscale( v ) { $("#scale").val( v ); }			
			
			// --------------------------------------------------------------------------------------------------
			var shift,
				guides = true;

			
			function Nadd( a ) {
				var N = getN()+a;
				setN( N );
				Nchange();
				generateSVG();
			}

			function Nchange() {
				if( shift ) {
					shift = false;
					var P = getN()/getD();
					setP( P );
				} else {
					var D = getN()/getP();
					setD( D );
				}
			}
			function Dchange() {
				if( shift ) {
					shift = false;
					var P = getN()/getD();
					setP( P );
				} else {
					Pchange();
				}
			}
			function Pchange() {
				var N = getD()*getP();
				N = Math.floor( N );
				setN( N );
				Nchange();
			}

			function calcP() {
				var P = getN()/getD();
				setP( P );
			}


			// --------------------------------------------------------------------------------------------------

			function generateSVG() {
				var w = 400,
					h = 400,
					sc = getscale(),
					N = getN(),
					D = getD(),
					P = getP(),
					A = 1/P,
					B = 1.157/P,
					OD = (N + 2)/P,
					RD = (N - 2)/P,
					BC = D*Math.cos(20*(Math.PI/180)),	//14.5
					CP = Math.PI/P,
					rmin = RD/2,
					rmax = OD/2,
					rbase = BC/2,
					pts = [],
					ac = 0,
					
					addpts = function( p ) {
						pts.push( p );	
					},
					pt = function( r, a ) {
						return { r: r, a: a };
					},
			
				out = '&lt;svg version="1.2" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="'+w+'px" height="'+h+'px" viewBox="'+(-w/2)+' '+(-h/2)+' '+w+' '+h+'" overflow="scroll" xml:space="preserve"&gt;';
				
				if( guides ) {
					out += '&lt;g opacity="0.2"&gt;';
					// pitch circle
					out += '&lt;circle fill="none" stroke="#f00" stroke-miterlimit="10" stroke-dasharray="4,4" cx="0" cy="0" r="'+(D/2)*sc+'"/&gt;';
					// Root circle
					out += '&lt;circle fill="none" stroke="#ccc" stroke-miterlimit="10" stroke-dasharray="4,4" cx="0" cy="0" r="'+(RD/2)*sc+'"/&gt;';
					// Outer circle
					out += '&lt;circle fill="none" stroke="#ccc" stroke-miterlimit="10" stroke-dasharray="4,4" cx="0" cy="0" r="'+(OD/2)*sc+'"/&gt;';
					// Base circle
					out += '&lt;circle fill="none" stroke="#00f" stroke-miterlimit="10" stroke-dasharray="4,4" cx="0" cy="0" r="'+(BC/2)*sc+'"/&gt;';
					
					out += '&lt;/g&gt;';
				}

				// calc
				addpts( pt( rmin, 0 ) );					//first point
				for( var i=1, pn=0; i&lt;200; i+=2 ) {
					// get a point...
					var bpl = polarToLinear( pt( rbase, -i ) ),			//base point linear
						len = ((rbase*Math.PI*2)/360)*i,				//length
						opl = polarToLinear( pt( len, -i+90 ) ),		//add line
						np = linearToPolar( { x: bpl.x+opl.x, y: bpl.y+opl.y } );
						
					if( np.r&gt;= rmin ) {
						pn++;
						if( np.r&lt;D/2 ) ac = np.a;
						if( np.r&gt; rmax ) {
							np.r = rmax;
							addpts( np );
							break;	
						}
						addpts( np );
					}
				} 
				// tukrozes
				var fa = 360/N,	// final a
					ma = fa/2 + 2*ac;	// mirror a		
									
				for( var i=pn; i&gt;=0; i-- ) {
					var bp = pts[i],
						na = ma-bp.a;					
					addpts( pt( bp.r, na ) );
				}

				// repeat
				for( var i=1, m=pts.length; i&lt;N; i++ ) {
					for( var p=0; p&lt;m; p++ ) {
						var bp = pts[p],
							na = bp.a+fa*i;
						addpts( pt( bp.r, na ) );
					}
				}
				
				// print points
				out += '&lt;polygon fill="#fff" stroke="#444" stroke-width="0.5" stroke-miterlimit="10" points="';
				for( var i=0; i&lt;pts.length; i++ ) {
					var point = polarToLinear( pts[i] );
					out += (point.x*sc)+','+(point.y*sc)+' ';
				}
				out += '"/&gt;';
				
				out += '&lt;/svg&gt;';
				
				$("#svg").html( out );
				$("#out").html( out );
			}
			
			function linearToPolar( c ) {
				var x = c.x, y = c.y, r, a;
				var AM = 180/Math.PI;
				r = Math.sqrt( x*x + y*y );
				a = Math.asin( y/r )*AM;
				if( x&lt;0 ) a = 180-a;
				a = (a+360)%360;
				return { r: r, a: a }
			}
			function polarToLinear( p ) {
				var r = p.r, a = p.a, x, y;
				var AM = 180/Math.PI;
				a = ((a+360)%360)/AM;
				
				x = Math.cos( a )*r;
				y = -Math.sin( a )*r;
				
				return { x: x, y: y }
			}

			// --------------------------------------------------------------------------------------------------

			function reset() {
				$("#N").bind("enterKey",Nchange);
				$("#D").bind("enterKey",Dchange);
				$("#P").bind("enterKey",Pchange);
				$("input").keyup("keyup",function(e){
					//console.log("key: "+e.keyCode+" shift: "+e.shiftKey );
					shift = e.shiftKey;
					if(e.keyCode == 13) {
						$(this).trigger("enterKey");
						generateSVG();
					}
				});
				generateSVG();
			}
			
			/*
				Drive
				rotation RPM (+ Left/ - right)
				btn: start pause stop

				----------------
				ID: 0,1,2 stb.
				parent connection (Drive/0,1,2 stb) (ID 0 -nal csak Drive)
				connection angle (only if gear connected)
				connection type (Gear/Axle (if driven))
				N,D
				P (only if axle connected)
				child connection(s) [0,1,2 stb]
				
				position and rotation:
				A offset (needed for connection cycle)
				R rotation (actual angle)
				
				BX,BY base X,Y (origo offset from top
			
			*/
		&lt;/script&gt;
		&lt;style&gt;
			label {
				display: inline-block;
				width: 200px;
			}
			.ratio {
				width: 30px;
			}
			#svg {
				position: absolute;
				top: 18px;
				left: 432px;
				/*background: #f8f8f8;*/
			}
			textarea {
				margin-top: 16px;
				width: 322px;
				height: 104px;
			}
		&lt;/style&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;p&gt;
			&lt;label for="N"&gt;Number of gear teeth:&lt;/label&gt;
			&lt;input type="text" id="N" value="18"&gt;* &lt;button onclick="Nadd(1)"&gt;+&lt;/button&gt;&lt;button onclick="Nadd(-1)"&gt;-&lt;/button&gt;&lt;br&gt;

			&lt;label for="D"&gt;Pitch diameter:&lt;/label&gt;
			&lt;input type="text" id="D" value="3"&gt;*&lt;br&gt;
			
			&lt;label for="P"&gt;Diametral pitch:&lt;/label&gt;
			&lt;input type="text" id="P"&gt;&lt;br&gt;
			
			&lt;label for="scale"&gt;Pixel per Unit:&lt;/label&gt;
			&lt;input type="text" id="scale" value="100"&gt;&lt;br&gt;

			&lt;textarea id="out"&gt;&lt;/textarea&gt;
		&lt;/p&gt;
		&lt;p&gt;
			* Shift + Enter: modifies the Diametral pitch 
		&lt;/p&gt;
		&lt;div id="svg"&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;
		calcP();
		reset();
	&lt;/script&gt;
	&lt;script&gt;
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
			(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
			m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
		ga('create', 'UA-780078-4', 'auto');
		ga('send', 'pageview');
	&lt;/script&gt;
&lt;/html&gt;</t>
<t tx="amd.20160321214152.1">http://hessmer.org/gears/InvoluteSpurGearBuilder.html

原始碼:

https://github.com/rainerhessmer/drh-horology/blob/BrowserBased/csg/InvoluteSpurGearBuilder.html

http://geargenerator.com/

http://geargenerator.com/index_proto.html

相關產品:

http://p208328.webspaceconfig.de/en/products/standard-gears/spur-gear-mechanisms/</t>
<t tx="amd.20160321214628.1">http://lcamtuf.coredump.cx/gcnc/</t>
<t tx="amd.20160326184051.1">@language md
Title: yen - 利用機械手臂模擬學習 Python
Date: 2016-03-26 01:20
Category: Misc
Tags: Robot, Python
Author: yen

先看看能否可攜

&lt;!-- PELICAN_END_SUMMARY --&gt;

Robodk: http://www.robodk.com/

http://140.130.17.17/public/2016spring/RoboDK.7z

V-rep: http://www.coppeliarobotics.com/

http://140.130.17.17/public/2016spring/V-REP_PRO_EDU.7z</t>
<t tx="amd.20160327224113.1">@language md
Title: yen - 印一隻機械臂
Date: 2016-03-27 01:20
Category: Misc
Tags: Robot, Python
Author: yen

先看看能否可行

&lt;!-- PELICAN_END_SUMMARY --&gt;

http://www.thingiverse.com/thing:30163

http://robotica.webs.upv.es/en/introduction-vrep-arm/</t>
<t tx="amd.20160327224200.1">@language md
Title: yen - opentoonz
Date: 2016-03-27 01:20
Category: Misc
Tags: Robot, Python
Author: yen

先看看能否可行

&lt;!-- PELICAN_END_SUMMARY --&gt;

opentoonz

https://opentoonz.github.io/e/index.html</t>
<t tx="amd.20160708145548.1">@language md
Title: yen - 上課專用網際程式規劃
Date: 2016-07-08 01:20
Category: Misc
Tags: 上課專用, 網際程式
Author: yen

RGA 為 Real-coded Genetic Algorithm, 也就是實數編碼基因演算法, 以下為平面四連桿機構, 令其移動桿三角形頂點通過特定的 10 個座標點的尺寸合成運算.

&lt;!-- PELICAN_END_SUMMARY --&gt;

</t>
<t tx="amd.20160727114410.1"></t>
<t tx="amd.20160727114506.1"></t>
<t tx="leo.20151212173315.1"></t>
<t tx="leo.20151212173315.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="leo.20151212173315.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="leo.20151212173658.1">@language python
import os
#os.system("pelican content -o ./ -s publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s publishconf.py")
g.es("admin pelican 執行完畢")

</t>
<t tx="leo.20151213085727.1">@language python
import os
#os.system("pelican content -o output -s local_publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="leo.20151213173811.1"></t>
<t tx="leo.20151213173830.1"></t>
<t tx="leo.20151213230723.1"></t>
<t tx="leo.20151213230729.1">利用

&lt;!-- PELICAN_END_SUMMARY --&gt;

來界定 Summary 摘要內容

前提, 必須設定 

PLUGIN_PATHS = ['plugin']

與

PLUGINS = ['liquid_tags.notebook', 'summary']

並且從 https://github.com/getpelican/pelican-plugins

取得 summary plugin</t>
<t tx="leo.20151213230957.1"># 設定網誌以 md 檔案建立的 file system date 為準, 無需自行設定

DEFAULT_DATE = 'fs'</t>
<t tx="leo.20160902104008.1"></t>
<t tx="yen.20161010133345.1"></t>
<t tx="yen.20161207105111.1">@language python
import os
import subprocess
import threading
import http.server, ssl

def domake():
    # build directory
    os.chdir("./../")
    server_address = ('localhost', 5443)
    httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print("5443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20161207105124.1">@language python
import os
import subprocess
import threading
import socket
import http.server, ssl

class HTTPServerV6(http.server.HTTPServer):
    address_family = socket.AF_INET6
  
def domake():
    # build directory
    os.chdir("./../")
    ipv6_address = '::1'
    server_address = (ipv6_address, 6443)
    #httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd = HTTPServerV6(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print("6443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20170215004706.1">目的在救回 About</t>
</tnodes>
</leo_file>
